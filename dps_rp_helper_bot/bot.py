import json
import datetime
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN, ADMIN_IDS

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return {"users": {}}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def is_admin(user_id):
    return user_id in ADMIN_IDS

@dp.message_handler()
async def handle_message(message: types.Message):
    data = load_data()
    parts = message.text.strip().split()
    if not parts:
        return

    cmd = parts[0].lower()
    user_id = str(message.from_user.id)
    username = message.from_user.full_name

    if user_id not in data["users"]:
        data["users"][user_id] = {
            "name": username,
            "zvanie": 0,
            "warns": 0,
            "vygovors": 0,
            "muted_until": None,
            "banned": False
        }

    user_data = data["users"][user_id]

    # ‚è± –ê–≤—Ç–æ—Ä–∞–∑–º—É—Ç
    now = datetime.datetime.now()
    muted_until_str = user_data.get("muted_until")
    if muted_until_str:
        try:
            muted_until = datetime.datetime.fromisoformat(muted_until_str)
            if now >= muted_until:
                user_data["muted_until"] = None
                await message.reply("‚è± –ú—É—Ç —Å–Ω—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            else:
                remaining = (muted_until - now).seconds // 60
                return await message.reply(f"‚ùå –í—ã –≤ –º—É—Ç–µ –µ—â—ë {remaining} –º–∏–Ω.")
        except:
            user_data["muted_until"] = None
            save_data(data)
            return await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –º—É—Ç–æ–º. –û–Ω –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.")

    if cmd == "–∫—Ç–æ" and len(parts) > 1 and parts[1] == "—è":
        await message.reply(f"üë§ –ò–º—è: {username}\nüÜî ID: {user_id}\nüéñ –ó–≤–∞–Ω–∏–µ: {user_data['zvanie']}\n‚ö†Ô∏è –í–∞—Ä—ã: {user_data['warns']}\nüìç –í—ã–≥–æ–≤–æ—Ä—ã: {user_data['vygovors']}")

    elif cmd == "–º–æ–µ" and parts[1] == "–∑–≤–∞–Ω–∏–µ":
        await message.reply(f"üéñ –í–∞—à–µ –∑–≤–∞–Ω–∏–µ: {user_data['zvanie']}")

    elif cmd == "–º–æ–∏" and parts[1] == "–≤—ã–≥–æ–≤–æ—Ä—ã":
        await message.reply(f"üìç –£ –≤–∞—Å {user_data['vygovors']} –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")

    elif cmd == "–º—É—Ç":
        if not is_admin(message.from_user.id):
            return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        target_id, minutes, reason = parts[1], int(parts[2]), " ".join(parts[3:])
        until_time = (datetime.datetime.now() + datetime.timedelta(minutes=minutes)).isoformat() if minutes > 0 else "9999-12-31T23:59:59"
        data["users"].setdefault(target_id, {"name": "Unknown", "zvanie": 0, "warns": 0, "vygovors": 0, "muted_until": None, "banned": False})
        data["users"][target_id]["muted_until"] = until_time
        await message.reply(f"üîá –ú—É—Ç –≤—ã–¥–∞–Ω {target_id} –Ω–∞ {minutes} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    elif cmd == "—Ä–∞–∑–º—É—Ç":
        if not is_admin(message.from_user.id):
            return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        target_id = parts[1]
        data["users"].setdefault(target_id, {"name": "Unknown", "zvanie": 0, "warns": 0, "vygovors": 0, "muted_until": None, "banned": False})
        data["users"][target_id]["muted_until"] = None
        await message.reply(f"üîà –ú—É—Ç —Å–Ω—è—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")

    elif cmd == "–≤—ã–¥–∞—Ç—å" and parts[1] == "–∑–≤–∞–Ω–∏–µ":
        if not is_admin(message.from_user.id):
            return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        target_id, level = parts[2], int(parts[3])
        data["users"].setdefault(target_id, {"name": "Unknown", "zvanie": 0, "warns": 0, "vygovors": 0, "muted_until": None, "banned": False})
        data["users"][target_id]["zvanie"] = level
        await message.reply(f"‚úÖ –ó–≤–∞–Ω–∏–µ {level} –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

    elif cmd == "–¥–æ–±–∞–≤–∏—Ç—å" and parts[1] == "–≤—ã–≥–æ–≤–æ—Ä":
        if not is_admin(message.from_user.id):
            return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        target_id = parts[2]
        data["users"].setdefault(target_id, {"name": "Unknown", "zvanie": 0, "warns": 0, "vygovors": 0, "muted_until": None, "banned": False})
        data["users"][target_id]["vygovors"] += 1
        await message.reply(f"üìç –í—ã–≥–æ–≤–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω {target_id}.")

    save_data(data)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
